{% extends 'base.html.twig' %}
{% block stylesheet %}
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css">
<link href=" https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/web/pdf_viewer.min.css " rel="stylesheet">

{% endblock %}

{% block javascripts %}
	{{ parent() }}

	<script src="{{ asset('js/flip.js') }}"></script>
	<script src=" https://cdn.jsdelivr.net/npm/pdfjs-dist@3.11.174/build/pdf.min.js "></script>
	<script src="//mozilla.github.io/pdf.js/build/pdf.mjs" type="module"></script>



{% endblock %}

{% block body %}
		<script src="//mozilla.github.io/pdf.js/build/pdf.mjs"></script>
<style>
	#canvas {
		display: block;
		margin: 0 auto;
	}

	#pageNumber {
		display: inline;
	}

	.previous {
		display: inline;
		background-color: #FFFFFF;
		color: black;
		border-radius: 15%;
	}

	.next {
		display: inline;
		background-color: #42A047;
		color: white;
		border-radius: 15%;
	}
</style>
	



	<p class="visually-hidden" id="gotMyPdf" >{{pdfPath}}</p>
<script src="//mozilla.github.io/pdf.js/build/pdf.mjs" type="module"></script>

<script type="module">
  // If absolute URL from the remote server is provided, configure the CORS
  // header on that server.
  const url = document.getElementById("gotMyPdf").textContent;


  // Loaded via <script> tag, create shortcut to access PDF.js exports.
  var { pdfjsLib } = globalThis;

  // The workerSrc property shall be specified.
  pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.mjs';

  var pdfDoc = null,
      pageNum = 1,
      pageRendering = false,
      pageNumPending = null,
      scale = 0.8,
      canvas = document.getElementById('the-canvas'),
      ctx = canvas.getContext('2d');

  /**
   * Get page info from document, resize canvas accordingly, and render page.
   * @param num Page number.
   */
  function renderPage(num) {
    pageRendering = true;
    // Using promise to fetch the page
    pdfDoc.getPage(num).then(function(page) {
      var viewport = page.getViewport({scale: scale});
      canvas.height = viewport.height;
      canvas.width = viewport.width;

      // Render PDF page into canvas context
      var renderContext = {
        canvasContext: ctx,
        viewport: viewport
      };
      var renderTask = page.render(renderContext);

      // Wait for rendering to finish
      renderTask.promise.then(function() {
        pageRendering = false;
        if (pageNumPending !== null) {
          // New page rendering is pending
          renderPage(pageNumPending);
          pageNumPending = null;
        }
      });
    });

    // Update page counters
    document.getElementById('page_num').textContent = num;
  }

  /**
   * If another page rendering in progress, waits until the rendering is
   * finised. Otherwise, executes rendering immediately.
   */
  function queueRenderPage(num) {
    if (pageRendering) {
      pageNumPending = num;
    } else {
      renderPage(num);
    }
  }

  /**
   * Displays previous page.
   */
  function onPrevPage() {
    if (pageNum <= 1) {
      return;
    }
    pageNum--;
    queueRenderPage(pageNum);
  }
  document.getElementById('prev').addEventListener('click', onPrevPage);

  /**
   * Displays next page.
   */
  function onNextPage() {
    if (pageNum >= pdfDoc.numPages) {
      return;
    }
    pageNum++;
    queueRenderPage(pageNum);
  }
  document.getElementById('next').addEventListener('click', onNextPage);

  /**
   * Asynchronously downloads PDF.
   */
  pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
    pdfDoc = pdfDoc_;
    document.getElementById('page_count').textContent = pdfDoc.numPages;

    // Initial/first page rendering
    renderPage(pageNum);
  });
</script>




<section class="w-100 d-flex justify-content-center">

	<canvas id="the-canvas"></canvas>

	<div>
	<button id="prev" class="btn-primary">Previous</button>
	<button id="next" class="btn-primary">Next</button>
	&nbsp; &nbsp;
	<span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
	</div>
  
</section>
{% endblock %}
